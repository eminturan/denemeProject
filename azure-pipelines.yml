pool:
  name: DenemeLocalPool

resources:
  repositories:
  - repository: main
    type: github
    name: eminturan/denemeproject
    trigger:
      branches:
        include:
        - main
    endpoint: eminturan

  - repository: dev
    type: github
    name: eminturan/denemeproject
    trigger:
      branches:
        include:
        - dev
    endpoint: eminturan

  - repository: test
    type: github
    name: eminturan/denemeproject
    trigger:
      branches:
        include:
        - test
    endpoint: eminturan

  - repository: templates
    type: github
    name: eminturan/azure-templates
    endpoint: eminturan

#Your build pipeline references an undefined variable named ‘Parameters.mavenPOMFile’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972

variables:
#- name: namespace
#  value: deneme-dev
- name: app_name
  value: 'deneme-project'
- name: helm_path
  value: backend-api-0.0.1.tgz
#- name: project_env
#  value: dev
- name: toolset
  value: 'maven'
- name: repo_name
  value: denemeproject
- name: registry_url
  value: 'eminturan'
- name: working_path
  value: '$(Build.Repository.LocalPath)/${{ variables.repo_name }}'
#  value: '$(Build.SourcesDirectory)/${{ variables.repo_name }}'

- name: isMain
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
- name: isDev
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]
- name: isTest
  value: $[eq(variables['Build.SourceBranch'], 'refs/heads/test')]

- name: project_env
  ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    value: prod
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    value: dev
  ${{ if eq(variables['Build.SourceBranchName'], 'test') }}:
    value: test

- name: namespace
  ${{ if eq(variables['project_env'], 'prod') }}:
    value: deneme-prod
  ${{ if eq(variables['project_env'], 'dev') }}:
    value: deneme-dev
  ${{ if eq(variables['project_env'], 'test') }}:
    value: deneme-test

stages:
- stage: CodeBuildStage
  displayName: Code Build Stage
  jobs:
  - job: CodeBuildJob
    pool:
      name: DenemeLocalPool
    displayName: Code Build Job
    steps:
      - checkout: templates
      - checkout: main
        condition: and(succeeded(), eq(variables.isMain, true))
      - checkout: dev
        condition: and(succeeded(), eq(variables.isDev, true))
      - checkout: test
        condition: and(succeeded(), eq(variables.isTest, true))
      - template: ./code-build.yml@templates
        parameters:
           workingDirectory: '${{ variables.working_path }}'
           toolset: ${{ variables.toolset }}


- stage: DockerBuildStage
  displayName: Docker Build Stage
  dependsOn: CodeBuildStage
  jobs:
  - job: DockerBuildJob
    pool:
      name: DenemeLocalPool
    displayName: Docker Build Job
    steps:
      - template: ./docker-build.yml@templates
        parameters:
           workingDirectory: '${{ variables.working_path }}'
           registry_url: '${{ variables.registry_url }}'
           image_name: '${{ variables.app_name }}'
           project_env: '${{ variables.project_env }}'


- stage: DockerPushStage
  displayName: Docker Push Stage
  dependsOn: DockerBuildStage
  jobs:
  - job: DockerPushJob
    pool:
      name: DenemeLocalPool
    displayName: Docker Push Job
    steps:
      - template: ./docker-push.yml@templates
        parameters:
           workingDirectory: '${{ variables.working_path }}'
           registry_url: '${{ variables.registry_url }}'
           registry_password: '$(registry_password)'
           registry_username: '$(registry_username)'
           image_name: '${{ variables.app_name }}'
           project_env: '${{ variables.project_env }}'


- stage: DeployToOpenshiftStage
  displayName: Deploy To Openshift Stage
  dependsOn: DockerPushStage
  jobs:
  - job: DeployToOpenshiftJob
    pool:
      name: DenemeLocalPool
    displayName: Deploy To Openshift Job
    steps:
      - template: ./deploy-ocp.yml@templates
        parameters:
           workingDirectory: '${{ variables.working_path }}'
           registry_url: '${{ variables.registry_url }}'
           image_name: '${{ variables.app_name }}'
           app_name: '${{ variables.app_name }}'
           namespace: '${{ variables.namespace }}'
           helm_path: '${{ variables.helm_path }}'
           project_env: '${{ variables.project_env }}'
